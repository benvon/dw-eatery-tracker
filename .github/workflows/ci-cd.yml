name: CI/CD Pipeline

on:
  push:
    branches: [ main, 'feature/**', 'feature!/**', 'chore/**', 'fix/**', 'bugfix/**' ]
  pull_request:
    branches: [ main ]

jobs:
  validate-branch-name:
    runs-on: ubuntu-latest
    steps:
      - name: Check branch name
        run: |
          # Check if this is a pull request
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For pull requests, we need to get the head branch name
            BRANCH_NAME="${{ github.head_ref }}"
            echo "Pull request from branch: $BRANCH_NAME"
          else
            # For direct pushes, get the branch name from GITHUB_REF
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
            echo "Push to branch: $BRANCH_NAME"
          fi
          
          if [[ "$BRANCH_NAME" == "main" ]]; then
            echo "Main branch is valid"
            exit 0
          fi
          
          if [[ "$BRANCH_NAME" == feature!/* || "$BRANCH_NAME" == feature/* || "$BRANCH_NAME" == chore/* || "$BRANCH_NAME" == fix/* || "$BRANCH_NAME" == bugfix/* ]]; then
            echo "Branch name is valid: $BRANCH_NAME"
            exit 0
          else
            echo "Invalid branch name: $BRANCH_NAME"
            echo "Branch names must start with feature!, feature, chore, fix, or bugfix"
            exit 1
          fi

  generate-version:
    needs: validate-branch-name
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Generate semantic version
        id: set-version
        run: |
          # Check if this is a pull request
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For pull requests, we need to get the head branch name
            BRANCH_NAME="${{ github.head_ref }}"
            echo "Pull request from branch: $BRANCH_NAME"
          else
            # For direct pushes, get the branch name from GITHUB_REF
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
            echo "Push to branch: $BRANCH_NAME"
          fi
          
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Remove the 'v' prefix
          LATEST_VERSION=${LATEST_TAG#v}
          
          # Split the version into major, minor, and patch
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"
          
          # Determine the version bump based on branch name
          if [[ "$BRANCH_NAME" == feature!/* ]]; then
            # Major release
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "$BRANCH_NAME" == feature/* ]]; then
            # Minor release
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            # Patch release (chore, fix, bugfix)
            PATCH=$((PATCH + 1))
          fi
          
          # Create the new version
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          
          # Set the output
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

  code-quality:
    needs: validate-branch-name
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint || true
        
      - name: SonarQube Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  security-scan:
    needs: validate-branch-name
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        run: npm audit --audit-level=high
        
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  build:
    needs: [generate-version, code-quality, security-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .next
            public
            package.json
            next.config.js

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          
      - name: Install Wrangler
        run: npm install -g wrangler
        
      - name: Deploy to Cloudflare Pages
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          wrangler pages publish .next --project-name=dw-eatery-tracker --branch=main

  create-tag:
    needs: [generate-version, deploy]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Create and push tag
        run: |
          VERSION=${{ needs.generate-version.outputs.version }}
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a $VERSION -m "Release $VERSION"
          git push origin $VERSION 